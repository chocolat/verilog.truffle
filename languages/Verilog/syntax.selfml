(root source.verilog
    (include @comments)
    (include @module_pattern)
    (include @keywords)
    (include @constants)
    (include @strings)
    (include @operators))

(collection comments
    (zone comment.line.double-slash.verilog
        (match
            (regex //.*$\n?)))
    (zone comment.block.c-style.verilog
        (start
            (regex /\*))
        (end
            (regex \*/))))

(collection strings
    (zone string.quoted.double.verilog
        (start ")
        (end ")
        (subzones
            (zone constant.character.escape.verilog
                (match
                    (regex \\.))))))

(collection parenthetical_list
    (zone meta.block.parenthetical_list.verilog
        (start
            (regex [\(]
                (0 punctuation.section.list.verilog)))
        (end
            (regex [\)]
                (0 punctuation.section.list.verilog)))
        (subzones
            (include @parenthetical_list)
            (include @comments)
            (include @keywords)
            (include @constants)
            (include @strings))))

(collection keywords
    (zone keyword.other.verilog
        (match
            (regex [\b(always|and|assign|attribute|begin|buf|bufif0|bufif1|case(xz)?|cmos|deassign|default|defparam|disable|edge|else|end(attribute|case|function|module|primitive|specify|table|task)?|event|for|force|forever|fork|function|highz(01)|if(none)?|initial|inout|input|integer|join|medium|module|large|macromodule|nand|negedge|nmos|nor|not|notif(01)|or|output|parameter|pmos|posedge|primitive|pull0|pull1|pulldown|pullup|rcmos|real|realtime|reg|release|repeat|rnmos|rpmos|rtran|rtranif(01)|scalared|signed|small|specify|specparam|strength|strong0|strong1|supply0|supply1|table|task|time|tran|tranif(01)|tri(01)?|tri(and|or|reg)|unsigned|vectored|wait|wand|weak(01)|while|wire|wor|xnor|xor)\b])))
    (zone keyword.other.compiler.directive.verilog
        (match
            (regex [^\s*`((cell)?define|default_(decay_time|nettype|trireg_strength)|delay_mode_(path|unit|zero)|ifdef|include|end(if|celldefine)|else|(no)?unconnected_drive|resetall|timescale|undef)\b])))
    (zone support.function.system.console.tasks.verilog
        (match
            (regex [\$(f(open|close)|readmem(b|h)|timeformat|printtimescale|stop|finish|(s|real)?time|realtobits|bitstoreal|rtoi|itor|(f)?(display|write(h|b)))\b])))
    (zone support.function.system.random_number.tasks.verilog
        (match
            (regex [\$(random|dist_(chi_square|erlang|exponential|normal|poisson|t|uniform))\b])))
    (zone support.function.system.pld_modeling.tasks.verilog
        (match
            (regex [\$((a)?sync\$((n)?and|(n)or)\$(array|plane))\b])))
    (zone support.function.system.stochastic.tasks.verilog
        (match
            (regex [\$(q_(initialize|add|remove|full|exam))\b])))
    (zone support.function.system.timing.tasks.verilog
        (match
            (regex [\$(hold|nochange|period|recovery|setup(hold)?|skew|width)\b])))
    (zone support.function.system.vcd.tasks.verilog
        (match
            (regex [\$(dump(file|vars|off|on|all|limit|flush))\b])))
    (zone support.function.non-standard.tasks.verilog
        (match
            (regex [\$(countdrivers|list|input|scope|showscopes|(no)?(key|log)|reset(_count|_value)?|(inc)?save|restart|showvars|getpattern|sreadmem(b|h)|scale)]))))

(collection operators
    (zone keyword.operator.verilog
        (match
            (regex [\+|-|\*|/|%|(<|>)=?|(!|=)?==?|!|&&?|\|\|?|\^?~|~\^?]))))

(collection instantiation_patterns
    (include @keywords)
    (zone meta.block.instantiation.parameterless.verilog
        (start
            (regex [^\s*([a-zA-Z][a-zA-Z0-9_]*)\s+([a-zA-Z][a-zA-Z0-9_]*)(?<!begin|if)\s*(?=\(|$)]
                (1 entity.name.tag.module.reference.verilog)
                (2 entity.name.tag.module.identifier.verilog)))
        (end
            (regex ;
                (0 punctuation.terminator.expression.verilog)))
        (subzones
            (include @comments)
            (include @constants)
            (include @strings)))
    (zone meta.block.instantiation.with.parameters.verilog
        (start
            (regex [^\s*([a-zA-Z][a-zA-Z0-9_]*)\s*(#)(?=\s*\()]
                (1 entity.name.tag.module.reference.verilog)))
        (end
            (regex ;
                (0 punctuation.terminator.expression.verilog)))
        (subzones
            (include @parenthetical_list)
            (zone entity.name.tag.module.identifier.verilog
                (match
                    (regex [[a-zA-Z][a-zA-Z0-9_]*]))))))

(collection module_pattern
    (zone meta.block.module.verilog
        (start
            (regex [\b(module)\s+([a-zA-Z][a-zA-Z0-9_]*)]
                (1 storage.type.module.verilog)
                (2 entity.name.type.module.verilog)))
        (end
            (regex \bendmodule\b
                (0 storage.type.module.verilog)))
        (subzones
            (include @comments)
            (include @keywords)
            (include @constants)
            (include @strings)
            (include @instantiation_patterns)
            (include @operators))))

(collection constants
    (zone constant.numeric.sized_integer.verilog
        (match
            (regex [\b[0-9]+'[bBoOdDhH][a-fA-F0-9_xXzZ]+\b])))
    (zone meta.block.numeric.range.verilog
        (match
            (regex [\b(\d+)(:)(\d+)\b]
                (3 constant.numeric.integer.verilog)
                (1 constant.numeric.integer.verilog)
                (2 punctuation.separator.range.verilog))))
    (zone constant.numeric.integer.verilog
        (match
            (regex [\b\d+(?i:e\d+)?\b])))
    (zone constant.numeric.real.verilog
        (match
            (regex [\b\d+\.\d+(?i:e\d+)?\b])))
    (zone constant.numeric.delay.verilog
        (match
            (regex [#\d+])))
    (zone constant.numeric.logic.verilog
        (match
            (regex [\b[01xXzZ]+\b]))))